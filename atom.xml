<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wenchang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wenchang1997.cn/"/>
  <updated>2020-03-23T03:33:11.000Z</updated>
  <id>https://www.wenchang1997.cn/</id>
  
  <author>
    <name>Wenchang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Python的零碎知识</title>
    <link href="https://www.wenchang1997.cn/2020/03/22/python-little-knowledge/"/>
    <id>https://www.wenchang1997.cn/2020/03/22/python-little-knowledge/</id>
    <published>2020-03-22T12:51:34.000Z</published>
    <updated>2020-03-23T03:33:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="os-mkdir-与-os-makedirs"><a href="#os-mkdir-与-os-makedirs" class="headerlink" title="os.mkdir() 与 os.makedirs()"></a>os.mkdir() 与 os.makedirs()</h3><pre><code>os.mkdir(path, mode=0o777, *, dir_fd=None)</code></pre><p>创建名为path的目录(只创建最后一层的目录),如果目录已经存在，则抛出异常FileExistsError。<br>mode就是所创建目录对应的文件及文件夹的读写权限; *，dir_fd=None为命名关键字参数。  </p><pre><code>os.makedirs(name, mode=0o777, exist_ok=False)</code></pre><p>递归创建目录，即路径中哪一层不存在，则自动创建。<br>name为所要创建的目录名称；参数mode传递给mkdir()；如果exist_ok是False（默认），当目标目录（即要创建的目录）已经存在，会抛出一个OSError。  </p><h3 id="在列表，元组，字典变量前加"><a href="#在列表，元组，字典变量前加" class="headerlink" title="在列表，元组，字典变量前加 *"></a>在列表，元组，字典变量前加 *</h3><p>在列表前加 *，会将列表拆分成一个一个的独立元素，不光是列表、元组、字典，由numpy生成的向量也可以拆分。即不加 *，则将整个列表当做一个元素使用；加了 *，则将列表里的每一个元素都拆分出来使用。  </p><h3 id="函数中-args-和-kwargs"><a href="#函数中-args-和-kwargs" class="headerlink" title="函数中 *args 和 **kwargs"></a>函数中 *args 和 **kwargs</h3><pre><code>*args：接收若干个位置参数，转换成元组tuple形式  **kwargs：接收若干个关键字参数，转换成字典dict形式</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;os-mkdir-与-os-makedirs&quot;&gt;&lt;a href=&quot;#os-mkdir-与-os-makedirs&quot; class=&quot;headerlink&quot; title=&quot;os.mkdir() 与 os.makedirs()&quot;&gt;&lt;/a&gt;os.mkdir() 与 os.
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.wenchang1997.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://www.wenchang1997.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法</title>
    <link href="https://www.wenchang1997.cn/2020/03/20/markdown/"/>
    <id>https://www.wenchang1997.cn/2020/03/20/markdown/</id>
    <published>2020-03-20T12:56:07.000Z</published>
    <updated>2020-03-20T12:58:20.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Markdown" scheme="https://www.wenchang1997.cn/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://www.wenchang1997.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>关于Pytorch的零碎知识</title>
    <link href="https://www.wenchang1997.cn/2020/03/20/pytorch-little-knowledge/"/>
    <id>https://www.wenchang1997.cn/2020/03/20/pytorch-little-knowledge/</id>
    <published>2020-03-20T09:59:03.000Z</published>
    <updated>2020-03-23T03:33:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="torch-manual-seed"><a href="#torch-manual-seed" class="headerlink" title="torch.manual_seed()"></a>torch.manual_seed()</h3><p>在神经网络中，参数默认是进行随机初始化的。不同的初始化参数往往会导致不同的结果，当得到比较好的结果时我们通常希望这个结果是可以复现的，在pytorch中，通过设置随机数种子也可以达到这么目的。常用的方法有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SEED = <span class="number">0</span></span><br><span class="line">np.random.seed(SEED) <span class="comment"># 涉及数据随即处理时，需要加入这句</span></span><br><span class="line">torch.manual_seed(SEED)</span><br><span class="line">torch.cuda.manual_seed(SEED) <span class="comment"># 使用GPU时</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;torch-manual-seed&quot;&gt;&lt;a href=&quot;#torch-manual-seed&quot; class=&quot;headerlink&quot; title=&quot;torch.manual_seed()&quot;&gt;&lt;/a&gt;torch.manual_seed()&lt;/h3&gt;&lt;p&gt;在神经网络中
      
    
    </summary>
    
    
      <category term="Pytorch" scheme="https://www.wenchang1997.cn/categories/Pytorch/"/>
    
    
      <category term="Pytorch" scheme="https://www.wenchang1997.cn/tags/Pytorch/"/>
    
      <category term="Python" scheme="https://www.wenchang1997.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="https://www.wenchang1997.cn/2020/03/20/git-skills/"/>
    <id>https://www.wenchang1997.cn/2020/03/20/git-skills/</id>
    <published>2020-03-20T05:01:58.000Z</published>
    <updated>2020-03-20T12:34:15.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="GitHub" scheme="https://www.wenchang1997.cn/categories/GitHub/"/>
    
    
      <category term="Git" scheme="https://www.wenchang1997.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建博客</title>
    <link href="https://www.wenchang1997.cn/2020/03/19/hexo-github/"/>
    <id>https://www.wenchang1997.cn/2020/03/19/hexo-github/</id>
    <published>2020-03-19T10:51:04.000Z</published>
    <updated>2020-03-20T12:36:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过两天的踩坑与折腾，我的博客终于可以接客了。。。<br>今天就用这第一篇文章来记录我的博客搭建过程  </p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>macOS 10.14.3 或<br>Ubuntu 17.04  </p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Git、Node.js、npm和hexo  </p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>执行以下命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git <span class="comment"># Ubuntu  </span></span><br><span class="line">$ brew install git <span class="comment"># macOS</span></span><br></pre></td></tr></table></figure><p>注：macOS用户使用brew安装时可能会卡在Updating Homebrew，这是因为源所造成的。使用一次Ctrl + C即可退出更新，进行正常的下载安装。</p><p>检查版本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>安装Node.js之前，应先安装好Python、gcc等编译器。由于使用apt-get安装Node.js可能会出现报错，故建议直接从<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">官网</a>下载源码安装（macOS用户可直接使用安装包安装）。Ubuntu用户请执行以下命令安装：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure  </span><br><span class="line">$ make  </span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><p>执行以下命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install npm <span class="comment"># Ubuntu  </span></span><br><span class="line">$ brew install npm <span class="comment"># macOS</span></span><br></pre></td></tr></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>官网提供的安装指令为：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>若该指令无法正常安装hexo，可使用以下命令安装：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install --unsafe-perm --verbose -g hexo <span class="comment"># Ubuntu  </span></span><br><span class="line">$ sudo npm install hexo-cli -g <span class="comment"># macOS</span></span><br></pre></td></tr></table></figure><h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><h3 id="初始化与常用指令"><a href="#初始化与常用指令" class="headerlink" title="初始化与常用指令"></a>初始化与常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog <span class="comment"># blog为博客的根目录，该文件夹必需为空</span></span><br></pre></td></tr></table></figure><p><code>hexo init blog</code>不能初始化的问题: 可能是源不能使用，可用命令<code>nrm ls</code>列出所有的可用的源,再用命令<code>nrm use cnpm</code>选择cnpm。若还不能使用，便只能用命令<code>npm test</code>来测试所有源,找一个可用的源名称,再使用<code>npm use + 源名称</code>的命令更换即可  </p><p>一些常用命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install <span class="comment"># 注意，一定要加这个命令！！！！否则生成的public\index.html文件可能各种空白  </span></span><br><span class="line">$ hexo g <span class="comment"># 或者hexo generate //生成静态页面  </span></span><br><span class="line">$ hexo s <span class="comment"># 或者hexo server 本地查看  </span></span><br><span class="line">$ hexo d <span class="comment"># 或者hexo deploy //部署博客到远程  </span></span><br><span class="line">$ hexo new <span class="string">"postName"</span> <span class="comment"># 新建文章  </span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br></pre></td></tr></table></figure><p>若本地查看的命令<code>hexo s</code>出现错误log，可使用以下命令代替：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -s</span><br></pre></td></tr></table></figure><h3 id="更换主题（eg-Butterfly）"><a href="#更换主题（eg-Butterfly）" class="headerlink" title="更换主题（eg: Butterfly）"></a>更换主题（eg: Butterfly）</h3><p>执行以下命令下载主题：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /blog/themes <span class="comment"># 切换到主题目录  </span></span><br><span class="line">$ git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly <span class="comment"># 克隆主题到本地,可以在github上搜索主题,替换相应链接就可以了  </span></span><br><span class="line">$ npm install hexo-renderer-pug hexo-renderer-stylus <span class="comment"># Butterfly主题所需的插件</span></span><br></pre></td></tr></table></figure><p>修改blog目录下的 _config.yml 配置文件中的theme属性，将其设置为Butterfly(根据主题名称设定)。  </p><p>若使用命令<code>hexo g</code>时遇见‘Cannot read property ‘meta’ of undefined’的错误，请在Butterfly主题目录下的 _config.yml 配置文件中，将‘douban’属性的所有注释取消。</p><h3 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h3><p><a href="www.github.com">Github官网</a>创建账户登录之后,新建一个名称为[账户名.github.io]的代码仓库。<br>注：若个人主页的网站内容是在master分支下,则可以通过 <a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 来访问你的个人主页  </p><h3 id="使用hexo-deploy部署"><a href="#使用hexo-deploy部署" class="headerlink" title="使用hexo deploy部署"></a>使用<code>hexo deploy</code>部署</h3><p>如果要将代码部署到Github，需在blog根目录下的配置文件 _config.xml中作如下修改：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">  <span class="built_in">type</span>: git  </span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git  </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后安装一个拓展：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>若为GitHub新用户（或更换新电脑），需要生成密钥后才能正常使用<code>hexo d</code>命令部署博客。密钥生成命令如下所示：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><p>此时在 /home/you/.ssh/id_rsa目录下会生成 id_rsa.pub 和 id_rsa 文件，然后登录Github，在setting中的SSH设置页面填入 id_rsa.pub 文件的内容即可。  </p><p>若blog根目录下无 .git 文件，则需要使用<code>git init</code>对该目录进行git仓库的初始化。</p><p>最后执行如下命令完成部署,即可在github上创建的仓库里看到代码（今后修改文件，也只需要使用以下代码进行更新、部署）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  </span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/  </span><br><span class="line">$ touch CNAME  </span><br><span class="line">$ vim CNAME <span class="comment"># 输入你的域名  </span></span><br><span class="line">$ git add CNAME  </span><br><span class="line">$ git commit -m <span class="string">"add CNAME"</span></span><br></pre></td></tr></table></figure><p>然后在注册商处添加域名解析即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过两天的踩坑与折腾，我的博客终于可以接客了。。。&lt;br&gt;今天就用这第一篇文章来记录我的博客搭建过程  &lt;/p&gt;
&lt;h2 id=&quot;系统&quot;&gt;&lt;a href=&quot;#系统&quot; class=&quot;headerlink&quot; title=&quot;系统&quot;&gt;&lt;/a&gt;系统&lt;/h2&gt;&lt;p&gt;macOS 10.1
      
    
    </summary>
    
    
      <category term="Web" scheme="https://www.wenchang1997.cn/categories/Web/"/>
    
    
      <category term="Hexo" scheme="https://www.wenchang1997.cn/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://www.wenchang1997.cn/tags/GitHub/"/>
    
  </entry>
  
</feed>
